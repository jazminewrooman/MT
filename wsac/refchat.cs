//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="Ischat")]
public interface Ischat
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Ischat/MandaMsg", ReplyAction="http://tempuri.org/Ischat/MandaMsgResponse")]
    System.IAsyncResult BeginMandaMsg(string msg, int idusuario, System.AsyncCallback callback, object asyncState);
    
    void EndMandaMsg(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Ischat/MsgNuevo", ReplyAction="http://tempuri.org/Ischat/MsgNuevoResponse")]
    System.IAsyncResult BeginMsgNuevo(string msg, int idusuario, System.AsyncCallback callback, object asyncState);
    
    void EndMsgNuevo(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IschatChannel : Ischat, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class IschatClient : System.ServiceModel.ClientBase<Ischat>, Ischat
{
    
    private BeginOperationDelegate onBeginMandaMsgDelegate;
    
    private EndOperationDelegate onEndMandaMsgDelegate;
    
    private System.Threading.SendOrPostCallback onMandaMsgCompletedDelegate;
    
    private BeginOperationDelegate onBeginMsgNuevoDelegate;
    
    private EndOperationDelegate onEndMsgNuevoDelegate;
    
    private System.Threading.SendOrPostCallback onMsgNuevoCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public IschatClient()
    {
    }
    
    public IschatClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public IschatClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public IschatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public IschatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MandaMsgCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MsgNuevoCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult Ischat.BeginMandaMsg(string msg, int idusuario, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginMandaMsg(msg, idusuario, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void Ischat.EndMandaMsg(System.IAsyncResult result)
    {
        base.Channel.EndMandaMsg(result);
    }
    
    private System.IAsyncResult OnBeginMandaMsg(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string msg = ((string)(inValues[0]));
        int idusuario = ((int)(inValues[1]));
        return ((Ischat)(this)).BeginMandaMsg(msg, idusuario, callback, asyncState);
    }
    
    private object[] OnEndMandaMsg(System.IAsyncResult result)
    {
        ((Ischat)(this)).EndMandaMsg(result);
        return null;
    }
    
    private void OnMandaMsgCompleted(object state)
    {
        if ((this.MandaMsgCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.MandaMsgCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void MandaMsgAsync(string msg, int idusuario)
    {
        this.MandaMsgAsync(msg, idusuario, null);
    }
    
    public void MandaMsgAsync(string msg, int idusuario, object userState)
    {
        if ((this.onBeginMandaMsgDelegate == null))
        {
            this.onBeginMandaMsgDelegate = new BeginOperationDelegate(this.OnBeginMandaMsg);
        }
        if ((this.onEndMandaMsgDelegate == null))
        {
            this.onEndMandaMsgDelegate = new EndOperationDelegate(this.OnEndMandaMsg);
        }
        if ((this.onMandaMsgCompletedDelegate == null))
        {
            this.onMandaMsgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMandaMsgCompleted);
        }
        base.InvokeAsync(this.onBeginMandaMsgDelegate, new object[] {
                    msg,
                    idusuario}, this.onEndMandaMsgDelegate, this.onMandaMsgCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult Ischat.BeginMsgNuevo(string msg, int idusuario, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginMsgNuevo(msg, idusuario, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void Ischat.EndMsgNuevo(System.IAsyncResult result)
    {
        base.Channel.EndMsgNuevo(result);
    }
    
    private System.IAsyncResult OnBeginMsgNuevo(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string msg = ((string)(inValues[0]));
        int idusuario = ((int)(inValues[1]));
        return ((Ischat)(this)).BeginMsgNuevo(msg, idusuario, callback, asyncState);
    }
    
    private object[] OnEndMsgNuevo(System.IAsyncResult result)
    {
        ((Ischat)(this)).EndMsgNuevo(result);
        return null;
    }
    
    private void OnMsgNuevoCompleted(object state)
    {
        if ((this.MsgNuevoCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.MsgNuevoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void MsgNuevoAsync(string msg, int idusuario)
    {
        this.MsgNuevoAsync(msg, idusuario, null);
    }
    
    public void MsgNuevoAsync(string msg, int idusuario, object userState)
    {
        if ((this.onBeginMsgNuevoDelegate == null))
        {
            this.onBeginMsgNuevoDelegate = new BeginOperationDelegate(this.OnBeginMsgNuevo);
        }
        if ((this.onEndMsgNuevoDelegate == null))
        {
            this.onEndMsgNuevoDelegate = new EndOperationDelegate(this.OnEndMsgNuevo);
        }
        if ((this.onMsgNuevoCompletedDelegate == null))
        {
            this.onMsgNuevoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMsgNuevoCompleted);
        }
        base.InvokeAsync(this.onBeginMsgNuevoDelegate, new object[] {
                    msg,
                    idusuario}, this.onEndMsgNuevoDelegate, this.onMsgNuevoCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override Ischat CreateChannel()
    {
        return new IschatClientChannel(this);
    }
    
    private class IschatClientChannel : ChannelBase<Ischat>, Ischat
    {
        
        public IschatClientChannel(System.ServiceModel.ClientBase<Ischat> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginMandaMsg(string msg, int idusuario, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = msg;
            _args[1] = idusuario;
            System.IAsyncResult _result = base.BeginInvoke("MandaMsg", _args, callback, asyncState);
            return _result;
        }
        
        public void EndMandaMsg(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("MandaMsg", _args, result);
        }
        
        public System.IAsyncResult BeginMsgNuevo(string msg, int idusuario, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = msg;
            _args[1] = idusuario;
            System.IAsyncResult _result = base.BeginInvoke("MsgNuevo", _args, callback, asyncState);
            return _result;
        }
        
        public void EndMsgNuevo(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("MsgNuevo", _args, result);
        }
    }
}
